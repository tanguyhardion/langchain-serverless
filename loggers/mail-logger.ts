import nodemailer from 'nodemailer';

/**
 * Creates and configures the nodemailer transporter using Gmail SMTP
 */
function createTransporter() {
  const gmailEmail = process.env.GMAIL_EMAIL;
  const gmailAppPassword = process.env.GMAIL_APP_PASSWORD;

  if (!gmailEmail || !gmailAppPassword) {
    throw new Error("GMAIL_EMAIL and GMAIL_APP_PASSWORD must be set in environment variables");
  }

  return nodemailer.createTransporter({
    service: 'gmail',
    auth: {
      user: gmailEmail,
      pass: gmailAppPassword,
    },
  });
}

/**
 * Sends an email notification specifically for LLM API calls
 * @param callType - The type of LLM call (invoke, response, error)
 * @param inputData - The data sent to the LLM
 * @param outputData - The data returned from the LLM (if applicable)
 * @param metadata - Additional metadata about the call
 */
export async function sendLLMCallEmail(
  callType: "invoke" | "response" | "error",
  inputData?: any,
  outputData?: any,
  metadata?: Record<string, any>
): Promise<void> {
  try {
    const recipientEmail = process.env.RECIPIENT_EMAIL;
    
    if (!recipientEmail) {
      throw new Error("RECIPIENT_EMAIL must be set in environment variables");
    }

    const transporter = createTransporter();
    
    const now = new Date();
    const date = now.toISOString().split("T")[0];
    const time = now.toTimeString().split(" ")[0] + "." + now.getMilliseconds();

    const emailSubject = `[LLM API] ${callType.toUpperCase()} - ${date}`;
    
    let statusColor = "#007bff";
    let statusMessage = "";
    
    switch (callType) {
      case "invoke":
        statusColor = "#ffc107";
        statusMessage = "LLM API called with data";
        break;
      case "response":
        statusColor = "#28a745";
        statusMessage = "LLM API returned response";
        break;
      case "error":
        statusColor = "#dc3545";
        statusMessage = "LLM API call failed";
        break;
    }
    
    const emailBody = `
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
  <h2 style="color: ${statusColor};">LLM API Call Notification</h2>
  
  <table style="border-collapse: collapse; width: 100%; margin: 20px 0;">
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Status:</td>
      <td style="border: 1px solid #ddd; padding: 8px; color: ${statusColor}; font-weight: bold;">${statusMessage}</td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Date:</td>
      <td style="border: 1px solid #ddd; padding: 8px;">${date}</td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Time:</td>
      <td style="border: 1px solid #ddd; padding: 8px;">${time}</td>
    </tr>
    ${inputData ? `
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Input Data:</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><pre style="margin: 0; white-space: pre-wrap; max-height: 200px; overflow-y: auto;">${JSON.stringify(inputData, null, 2)}</pre></td>
    </tr>
    ` : ''}
    ${outputData ? `
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Output Data:</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><pre style="margin: 0; white-space: pre-wrap; max-height: 200px; overflow-y: auto;">${JSON.stringify(outputData, null, 2)}</pre></td>
    </tr>
    ` : ''}
    ${metadata ? `
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Metadata:</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><pre style="margin: 0; white-space: pre-wrap;">${JSON.stringify(metadata, null, 2)}</pre></td>
    </tr>
    ` : ''}
  </table>
  
  <p style="font-size: 12px; color: #666; margin-top: 30px;">
    This email was automatically generated by the langchain-serverless application for LLM API monitoring.
  </p>
</body>
</html>
    `;

    const mailOptions = {
      from: process.env.GMAIL_EMAIL,
      to: recipientEmail,
      subject: emailSubject,
      html: emailBody,
    };

    await transporter.sendMail(mailOptions);
    console.log(`LLM call email sent successfully to ${recipientEmail}`);
    
  } catch (error) {
    console.error("Failed to send LLM call email:", error);
    // Don't throw error to avoid disrupting the main LLM flow
  }
}
