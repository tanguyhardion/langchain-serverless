import nodemailer from 'nodemailer';
import { getLogLevelColor } from '../utils/log';

/**
 * Creates and configures the nodemailer transporter using Gmail SMTP
 */
function createTransporter() {
  const gmailEmail = process.env.GMAIL_EMAIL;
  const gmailAppPassword = process.env.GMAIL_APP_PASSWORD;

  if (!gmailEmail || !gmailAppPassword) {
    throw new Error("GMAIL_EMAIL and GMAIL_APP_PASSWORD must be set in environment variables");
  }

  return nodemailer.createTransporter({
    service: 'gmail',
    auth: {
      user: gmailEmail,
      pass: gmailAppPassword,
    },
  });
}

/**
 * Sends an email with log information - same structure as logger.ts database storage
 * @param message - The message to include in the email
 * @param level - The log level (info, error, warn, debug)
 * @param metadata - Additional metadata to include with the log
 */
export async function sendLogEmail(
  message: string,
  level: "info" | "error" | "warn" | "debug" = "info",
  metadata?: Record<string, any>
): Promise<void> {
  try {
    const recipientEmail = process.env.RECIPIENT_EMAIL;
    
    if (!recipientEmail) {
      throw new Error("RECIPIENT_EMAIL must be set in environment variables");
    }

    const transporter = createTransporter();
    
    // Create the same timestamp format as logger.ts
    const now = new Date();
    const date = now.toISOString().split("T")[0]; // 2025-08-18
    const time = now.toTimeString().split(" ")[0] + "." + now.getMilliseconds(); // 22:50:12.000

    // Format the email content
    const emailSubject = `[${level.toUpperCase()}] Application Log - ${date}`;
    
    const emailBody = `
<html>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
  <h2 style="color: ${getLogLevelColor(level)};">Application Log Entry</h2>
  
  <table style="border-collapse: collapse; width: 100%; margin: 20px 0;">
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Level:</td>
      <td style="border: 1px solid #ddd; padding: 8px; color: ${getLogLevelColor(level)}; font-weight: bold;">${level.toUpperCase()}</td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Date:</td>
      <td style="border: 1px solid #ddd; padding: 8px;">${date}</td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Time:</td>
      <td style="border: 1px solid #ddd; padding: 8px;">${time}</td>
    </tr>
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Message:</td>
      <td style="border: 1px solid #ddd; padding: 8px;">${message}</td>
    </tr>
    ${metadata ? `
    <tr>
      <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold; background-color: #f2f2f2;">Metadata:</td>
      <td style="border: 1px solid #ddd; padding: 8px;"><pre style="margin: 0; white-space: pre-wrap;">${JSON.stringify(metadata, null, 2)}</pre></td>
    </tr>
    ` : ''}
  </table>
  
  <p style="font-size: 12px; color: #666; margin-top: 30px;">
    This email was automatically generated by the langchain-serverless application.
  </p>
</body>
</html>
    `;

    const mailOptions = {
      from: process.env.GMAIL_EMAIL,
      to: recipientEmail,
      subject: emailSubject,
      html: emailBody,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Log email sent successfully to ${recipientEmail}`);
    
  } catch (error) {
    console.error("Failed to send log email:", error);
    throw error;
  }
}
